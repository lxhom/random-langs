#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent none
  environment {
    BASE_DIR = 'src/github.com/elastic/beats'
    PIPELINE_LOG_LEVEL = "INFO"
    BEATS_TESTER_JOB = 'Beats/beats-tester-mbp/main'
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
    disableConcurrentBuilds()
  }
}
